import java.util.*;
import java.io.*;

public class BidenBankAccounts {
    public static void main(String[] args) throws IOException {
        // Check command-line parameter usage
        if (args.length != 2) {
            System.out.println("Usage: java BidenBankAccounts inputFileName outputFileName");
            System.exit(1);
        }

        // Check if input file exists
        File inputFile = new File(args[0]);
        if (!inputFile.exists()) {
            System.out.println("Input file " + args[0] + " does not exist");
            System.exit(2);
        }

        // Create an ArrayList to hold BankAccount objects
        ArrayList<BankAccount> accounts = new ArrayList<>();

        // Create a Scanner for the input file
        Scanner input = new Scanner(inputFile);

        // Read data from input file separated by comma.
        while (input.hasNextLine()) { // while there is more to read
            String line = input.nextLine(); // read a line
            String[] tokens = line.split(","); // split line into tokens
            String ownerName = tokens[0]; // first token is owner name
            int accountNumber = Integer.parseInt(tokens[1]); // second token is account number
            double balance = Double.parseDouble(tokens[2]); // third token is balance
            String accountType = tokens[3]; // fourth token is account type

            if (accountType.equals("savings")) { // if account type is savings
                double interestRate = Double.parseDouble(tokens[4]); // fifth token is interest rate
                SavingsAccount savingsAccount = new SavingsAccount(ownerName, accountNumber, balance, interestRate); // create a SavingsAccount object
                accounts.add(savingsAccount); // add the SavingsAccount object to the ArrayList
            } else if (accountType.equals("checking")) { // if account type is checking
                int checkLimit = Integer.parseInt(tokens[4]); // fifth token is check limit
                CheckingAccount checkingAccount = new CheckingAccount(ownerName, accountNumber, balance, checkLimit); // create a CheckingAccount object
                accounts.add(checkingAccount); // add the CheckingAccount object to the ArrayList
            }
        }

        // Close the input file
        input.close();

        // Sort the ArrayList using AccountNumberComparator object.
        AccountNumberComparator ancomp = new AccountNumberComparator();
        Collections.sort(accounts, ancomp);

        // Create a PrintWriter for the output file.
        PrintWriter output = new PrintWriter(args[1]);

        for (BankAccount account : accounts) {
            output.println(account.toString());
        }

        output.close();
    }
}

class BankAccount {
    private String ownerName;
    private int accountNumber;
    private double balance;

    public BankAccount(String ownerName, int accountNumber, double balance) {
        this.ownerName = ownerName;
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public String getOwnerName() {
        return ownerName;
    }

    public int getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    @Override
    public String toString() {
        return ownerName + "," + accountNumber + "," + balance;
    }
}

class SavingsAccount extends BankAccount {
    private double interestRate;

    public SavingsAccount(String ownerName, int accountNumber, double balance, double interestRate) {
        super(ownerName, accountNumber, balance);
        this.interestRate = interestRate;
    }

    public double getInterestRate() {
        return interestRate;
    }

    @Override
    public String toString() {
        return super.toString() + ",savings," + interestRate;
    }
}

class CheckingAccount extends BankAccount {
    private int checkLimit;

    public CheckingAccount(String ownerName, int accountNumber, double balance, int checkLimit) {
        super(ownerName, accountNumber, balance);
        this.checkLimit = checkLimit;
    }

    public int getCheckLimit() {
        return checkLimit;
    }

    @Override
    public String toString() {
        return super.toString() + ",checking," + checkLimit;
    }
}

class AccountNumberComparator implements Comparator<BankAccount> {

    @Override
    public int compare(BankAccount a1, BankAccount a2) {
        return Integer.compare(a1.getAccountNumber(), a2.getAccountNumber());
    }
}